{
  parserClass="org.mule.tooling.lang.dw.parser.WeaveParser"
  parserUtilClass="org.mule.tooling.lang.dw.parser.WeaveParserUtil"
  psiImplUtilClass = 'org.mule.tooling.lang.dw.parser.psi.WeavePsiImplUtils'
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="Weave"
  psiImplClassSuffix="Impl"
  psiPackage="org.mule.tooling.lang.dw.parser.psi"
  psiImplPackage="org.mule.tooling.lang.dw.parser.psi.impl"
  elementTypeHolderClass="org.mule.tooling.lang.dw.parser.psi.WeaveTypes"
  elementTypeClass="org.mule.tooling.lang.dw.parser.WeaveElementType"
  tokenTypeClass="org.mule.tooling.lang.dw.parser.WeaveTokenType"

  tokens = [
        L_PARREN='('
        R_PARREN=')'

        AT_SPACE='@ '
        CARET_SPACE='^ '
        L_CURLY='{'
        R_CURLY='}'
        L_BRACKET='['
        R_BRACKET=']'
        SUB_TYPE='<:'
        COMMA=','
        COLON=':'
        FAT_ARROW='=>'

        LINE_COMMENT="regexp://([^\r\n])*?"

        DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
        SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"
        BACKTIKED_QUOTED_STRING="regexp:`([^\\\'\r\n]|\\[^\r\n])*`?"

        MIME_TYPE_KEYWORD="regexp:[\"text\" | \"audio\" | \"video\" | \"application\" | \"multipart\" | \"image\" ]\"/\"[a-zA-Z\-_]+"

        //
        DOCUMENT_SEPARATOR="---"
        UNDERSCORE="_"
        NOT_EQUAL="!="
        SIMILAR="~="
        TILDE="~"
        EQUAL="=="
        EQ="="
        LESS="<"
        LESS_EQUAL="<="
        GREATER=">"
        GREATER_EQUAL=">="
        AS="as"
        IS="is"
        FROM_KEYWORD="from"
        PLUS="+"
        MINUS="-"
        MULTIPLY="*"
        DIVISION="/"
        MODULO="%"

        AT="@"
        QUESTION="?"
        ESCLAMATION="!"
        HASH="#"
        METADATA_INJECTOR="<~"

        AND_KEYWORD="and"
        DO_KEYWORD="do"
        OR_KEYWORD="or"

        ARROW_TOKEN="->"

        IF="if"

        TRUE_LITERAL="true"
        FALSE_LITERAL="false"
        RULE_NULL_LITERAL="null"

        VERSION_DIRECTIVE_KEYWORD="%dw"
        INPUT_DIRECTIVE_KEYWORD="input"
        VAR_DIRECTIVE_KEYWORD="var"
        FUNCTION_DIRECTIVE_KEYWORD="fun"
        ANNOTATION_DIRECTIVE_KEYWORD="annotation"
        NAMESPACE_DIRECTIVE_KEYWORD="ns"
        TYPE_DIRECTIVE_KEYWORD="type"
        MATCHES_KEYWORD="matches"
        MATCH_KEYWORD="match"
        UPDATE_KEYWORD="update"
        AT_KEYWORD="at"
        OUTPUT_DIRECTIVE_KEYWORD="output"
        NOT_KEYWORD="not"
        CASE_KEYWORD="case"

        OR="|"
        XOR="^"
        AND="&"
        OPEN_CLOSE_KEYWORD="{|"
        OPEN_CLOSE_ORDERED_KEYWORD="{-|"
        OPEN_ORDERED_KEYWORD="{-"

        CLOSE_ORDERED_KEYWORD="-}"
        CLOSE_CLOSE_ORDERED_KEYWORD="|-}"
        CLOSE_CLOSE_KEYWORD="|}"

        PACKAGE_SEPARATOR="::"
  ]

    extends(".*(Directive)")=Directive
    extends(".*(Expression)")=Expression
    extends(".*(Type)")=Type
    extends(".*(Pattern)")=Pattern
    extends(".*(Literal)")=LiteralExpression
    extends(".*(Attribute)")=Attribute

}

root ::= Document

Document ::= Header ('---'  Body) ? | Body {
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiQualifiedNamedElement"]
    methods=[getPresentation getQualifiedName getName setName isMappingDocument isModuleDocument getElementIcon]
}

Header::= (Directive)+

Directive
         ::=
         (VersionDirective
           | NamespaceDirective
           | VariableDirective
           | AnnotationDirective
           | OutputDirective
           | InputDirective
           | TypeDirective
           | ImportDirective
           | FunctionDirective) {recoverWhile=HeaderRecover}

AnnotationDirective ::= Annotation* 'annotation' AnnotationDefinition
{
     pin=2
}

AnnotationDefinition ::= Identifier '('( AnnotationParameter ( ',' AnnotationParameter )*  )?')'
{
     methods = [getName setName getNameIdentifier getElementIcon]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
     pin=1
}

AnnotationParameter::= ((Identifier) ':' TypeLiteral) ('=' Expression)?

private HeaderRecover::= !('---'|OUTPUT_DIRECTIVE_KEYWORD|'type'|'fun'|'ns'|'var'|'%dw'|'input'|IMPORT_DIRECTIVE_KEYWORD | '@' | 'annotation')

VersionDirective::= Annotation* '%dw'  DOUBLE_LITERAL {pin=2}

ImportDirective::= Annotation* IMPORT_DIRECTIVE_KEYWORD (((ImportedElement (',' ImportedElement)*) | '*') 'from')? FqnIdentifier ('as' Identifier)? {pin=2}

ImportedElement::= Identifier ('as' ImportedElementAlias)? {
    methods = [getName setName getNameIdentifier]
    implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
    mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
    pin=2
}

ImportedElementAlias::=Identifier

NamespaceDirective::= Annotation* 'ns' NamespaceDefinition {pin=2}

NamespaceDefinition::=Identifier NAMESPACE_URI
  {
      methods = [getName setName getNameIdentifier]
      implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
      mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
      pin=1
 }

VariableDirective::= Annotation* 'var' VariableDefinition {pin=2}

OutputDirective::= Annotation* OUTPUT_DIRECTIVE_KEYWORD (":" Type)? ((DataFormat ('with' Identifier)?) | Identifier) Options? {pin=2}

TypeDirective::= Annotation* 'type' TypeDefinition {pin=2}

TypeDefinition::=Identifier TypeParameterDeclaration? '=' (TypeLiteral | UndefinedLiteral)
                 {
                      methods = [getName setName getNameIdentifier getElementIcon]
                      implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
                      mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
                      pin=1
                 }

FunctionDirective::= Annotation*  'fun' FunctionDefinition {pin=2}

FunctionDefinition::=Identifier TypeParameterDeclaration? L_PARREN ( FunctionParameter ( ',' FunctionParameter )* )? (",")? R_PARREN ( ":" (Type | DynamicReturn)? "=" | "=")? Expression
{
     methods = [getName setName getNameIdentifier getPresentation getElementIcon]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
     pin=3
}

DynamicReturn ::= '?'

Schema::= '{' ( SchemaElement ( ',' SchemaElement )* )? (",")? '}' {pin = 1}

SchemaElement::=SchemaKV | ConditionalSchemaKV

SchemaKV::= (Identifier | StringLiteral) ':' Expression {pin = 2}

ConditionalSchemaKV::= "(" (Identifier | StringLiteral) ':' Expression ")" IF "(" Expression ")" {pin = 3}

InputDirective::= Annotation* 'input' VariableNameTypeDefinition InputDataFormat? Options? {
    pin=2
    methods=[getName setName getNameIdentifier]
    implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
    mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
}

InputDataFormat::=(DataFormat | Identifier)

Options::= OptionElement ( ',' OptionElement )*

OptionElement::= Identifier '=' LiteralExpression {pin=2}

Body ::= Expression

ObjectExpression ::= SingleKeyValuePairObj | MultipleKeyValuePairObj {
    implements="com.intellij.psi.NavigatablePsiElement"
    methods=[getPresentation]
}

private SingleKeyValuePairObj ::= KeyValuePair | '(' KeyValuePair ')' (conditionalKV)

private MultipleKeyValuePairObj::= '{' objectEntryRule? (',' objectEntryRule)* (',')? '}' {pin= 1}

private objectEntryRule ::= KeyValuePair | DynamicKeyValuePair

KeyValuePair::=  Key ':' Expression
                 {
                     implements="com.intellij.psi.NavigatablePsiElement"
                     methods=[getPresentation]
                     pin=2
                 }

DynamicKeyValuePair ::= '(' Expression ')' (dynamicKV | conditionalKV)?

private conditionalKV ::= IF Expression {pin=1}

private dynamicKV ::= (Attributes)? ':' Expression {pin=2}

Key::= QualifiedName Attributes?

QualifiedName::= DeclaredNamespace? (Identifier | StringLiteral) {
    name="Key Name"
}

DeclaredNamespace::= Identifier '#'

Attributes::= '@(' ( Attribute ( ',' Attribute )* )? ')' {pin=1}

Attribute::= SimpleAttribute
           | DynamicAttribute

DynamicAttribute ::= '(' Expression ')' ((':' Expression) | (IF Expression))?

SimpleAttribute::= QualifiedName ':' Expression

Expression::= MatchExpression
            | UpdateExpression
            | CustomInterpolatorExpression
            | DefaultValueExpression
            | BinaryExpression
            | SimpleExpression

CustomInterpolatorExpression ::= Identifier CustomInterpolationString
{
    methods = [getName setName getNameIdentifier]
    implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
    mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
}
CustomInterpolationString ::= BACKTIKED_QUOTED_STRING
{
    mixin = "org.mule.tooling.lang.dw.parser.psi.WeaveStringLiteralMixin"
}

private ValueExpression::=UndefinedLiteral
                  | UnaryMinusExpression
                  | NotExpression
                  | ConditionalExpression
                  | UsingExpression
                  | DoExpression
                  | LambdaLiteral
                  | ObjectDeconstructExpression
                  | ObjectExpression
                  | ArrayExpression
                  | VariableReferenceExpression
                  | LiteralExpression
                  | EnclosedExpression

private SimpleExpression ::=
             OrExpression
            | AndExpression
            | EqualityExpression
            | FunctionCallExpression
            | GreaterThanExpression
            | AdditionSubtractionExpression
            | RightShiftExpression
            | LeftShiftExpression
            | MultiplicationDivisionExpression
            | AsExpression
            | IsExpression
            | DotSelectorExpression
            | BracketSelectorExpression
            | ValueExpression


Annotation ::= '@'FqnIdentifier AnnotationArguments? {pin=2}

AnnotationArguments ::= '(' (AnnotationArgument ( ',' AnnotationArgument )* )? (',')? ')'

AnnotationArgument ::= Identifier '=' Expression

UnaryMinusExpression ::= '-' SimpleExpression {pin=1}

BinaryExpression ::= Expression BinaryFunctionIdentifier SimpleExpression {pin=2}

BinaryFunctionIdentifier ::= CustomLoader? ContainerModuleIdentifier Identifier
{
     methods = [getName setName getNameIdentifier getReferences]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
     name="Identifier"
}

AsExpression
         ::= Expression 'as' TypeLiteral {pin=2}

DefaultValueExpression
         ::= Expression DEFAULT SimpleExpression {pin=2}

OrExpression
         ::= Expression 'or' AndExpression {pin=2}

AndExpression
         ::= Expression 'and' EqualityExpression {pin=2}

EqualityExpression
         ::= Expression ( '==' | '!=' | '~=' ) GreaterThanExpression {pin=2}

IsExpression
         ::= Expression IS TypeLiteral {pin=2}

NotExpression ::= ('!' | 'not') ValueExpression {pin=1}

GreaterThanExpression
         ::= Expression  ( '>' !('>') | '>=' |  '<' !('<') | '<=' ) AdditionSubtractionExpression

AdditionSubtractionExpression
         ::= Expression  ( '+' | '-' ) Expression {pin=2}

RightShiftExpression
         ::= Expression '>''>' MultiplicationDivisionExpression {pin=2}

LeftShiftExpression
         ::= Expression '<''<' MultiplicationDivisionExpression {pin=2}

MultiplicationDivisionExpression ::= Expression  ( '*' | '/' ) Expression {pin=2}

FunctionCallExpression ::= Expression FunctionCallTypeParameters? FunctionCallArguments

FunctionCallTypeParameters ::= '<' (Type ( ',' Type )*)? '>'

FunctionCallArguments ::= '(' ( Expression ( ',' Expression )* )? (',')? ')' {pin=1}

UsingExpression ::=USING '(' VariableDefinition ( ',' VariableDefinition )*  (",")? ')' Expression {pin=1}


ConditionalExpression ::= ( IF | UNLESS ) '(' Expression ')' Expression ELSE Expression {pin=1}

EnclosedExpression ::= '(' Expression ')' (DynamicSingleKeyValuePair)?

DynamicSingleKeyValuePair ::= (Attributes)? ':' Expression

//Selectors
DotSelectorExpression ::=Expression ( '..' | '.' ) Selector? ('!'| '?')? {pin=2}

BracketSelectorExpression::=Expression '[' (('?' |'@' | '&' | '^' |'*')? ( '?' | '*' | '@')? DeclaredNamespace?  (Expression))  ']' ('!'| '?')?

MatchExpression ::= Expression 'match' (PatternMatcherExpression)

UpdateExpression ::= Expression 'update' (UpdateCases)

UpdateCases ::= '{' ('case' UpdateCase)+ '}' {pin = 2}

UpdateCase ::= ((Identifier | '(' Identifier ',' Identifier ')') 'at')? UpdateSelector ('!')? (IF EnclosedExpression)? '->' Expression  {
    pin = 4
}

private UpdateSelector ::= (('.' (ValueSelector | MultiValueSelector | AttributeSelector)) | '[' Expression ']') (UpdateSelector)*


PatternMatcherExpression ::= '{' ('case' Pattern)+ (DefaultPattern)? '}' {pin = 2}

Pattern ::= RegexPattern
          | NamedRegexPattern
          | EmptyArrayPattern
          | EmptyObjectPattern
          | ObjectDeconstructPattern
          | ArrayDeconstructPattern
          | TypePattern
          | NamedTypePattern
          | LiteralPattern
          | NamedLiteralPattern
          | ExpressionPattern

EmptyArrayPattern ::= '['']'  '->' Expression

EmptyObjectPattern ::= '{''}'  '->' Expression

ObjectDeconstructPattern ::= '{' DeconstructVariableDeclaration ':' DeconstructVariableDeclaration '~' DeconstructVariableDeclaration '}' '->' Expression {pin=5}

ArrayDeconstructPattern::= '[' DeconstructVariableDeclaration '~' DeconstructVariableDeclaration ']' '->' Expression {pin=3}

DeconstructVariableDeclaration::=Identifier {
     methods = [getName setName getNameIdentifier]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
     pin=2
}

LiteralPattern ::= (LiteralExpression | FqnIdentifier ) '->' Expression {pin=2}

ExpressionPattern ::= Identifier IF (EnclosedExpression | SimpleExpression) '->' Expression {
     methods = [getName setName getNameIdentifier]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
     pin=4
}

NamedLiteralPattern ::= Identifier ':' LiteralExpression '->' Expression {
     methods = [getName setName getNameIdentifier]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
     pin=2
}

TypePattern ::= 'is' Type '->' Expression {pin = 3}

NamedTypePattern ::= Identifier "is" TypeLiteral '->' Expression {
    methods = [getName setName getNameIdentifier]
    implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
    mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
    pin = 2
}

RegexPattern ::= 'matches' RegexLiteral '->' Expression {
    pin = 3
}

NamedRegexPattern ::= Identifier 'matches' RegexLiteral '->' Expression {
    methods = [getName setName getNameIdentifier]
    implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
    mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
    pin = 4
}

DefaultPattern ::= ELSE (Identifier)? '->' Expression {pin=1}

Selector ::= (ValueSelector |
         AllAttributeSelector |
         AttributeSelector |
         NamespaceSelector |
         AllSchemaSelector |
         SchemaSelector |
         ObjectSelector |
         AttributeMultiValueSelector|
         MultiValueSelector)

ValueSelector ::= fieldSelector

AllAttributeSelector ::=AT_SPACE  {pin=1}

AllSchemaSelector ::=CARET_SPACE  {pin=1}

AttributeSelector ::='@'fieldSelector? {pin=1}

ObjectSelector ::='&'fieldSelector?  {pin=1}

SchemaSelector ::='^'fieldSelector?  {pin=1}

NamespaceSelector ::='#'

AttributeMultiValueSelector ::= multiAttributeSelector | multiAttributeSelectorOld

private multiAttributeSelectorOld ::= '@' '*' fieldSelector {pin=2}

private multiAttributeSelector ::= '*''@'fieldSelector {pin=2}


private fieldSelector ::= DeclaredNamespace? (StringLiteral|Identifier)



MultiValueSelector ::= '*'fieldSelector  {pin=1}

VariableReferenceExpression ::= FqnIdentifier

VariableDefinition ::= VariableNameTypeDefinition '='  Expression  {
            methods=[getName setName getNameIdentifier getElementIcon]
            implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
            mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
            pin=2
        }

private VariableNameTypeDefinition ::= Annotation* Identifier (":" Type?)?

//Literal Values
LiteralExpression
         ::= BooleanLiteral
           | NullLiteral
           | StringLiteral
           | NumberLiteral
           | AnyDateLiteral
           | RegexLiteral

DoExpression ::= 'do' '{' (DoDirectives+ '---')?  Expression'}' {pin=1}


private DoDirectives
         ::=  Annotation* (VariableDirective
           | TypeDirective
           | ImportDirective
           | NamespaceDirective
           | FunctionDirective) {recoverWhile=HeaderRecover}

UndefinedLiteral ::= '?''?''?'

LambdaLiteral ::= TypeParameterDeclaration? '(' ( FunctionParameter ( ',' FunctionParameter )* )? (",")? ')' (':' Type?)?  '->' SimpleExpression {pin = 7}

private TypeParameterDeclaration ::= '<' (TypeParameter (',' TypeParameter)*)? '>'

FunctionParameter ::= VariableNameTypeDefinition ('=' Expression)?  {
        methods=[getName setName getNameIdentifier]
        mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
        implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"

     }

NullLiteral ::= NULL_LITERAL_KEYWORD

BooleanLiteral ::= TRUE_LITERAL
                        | FALSE_LITERAL

StringLiteral ::= DOUBLE_QUOTED_STRING
                      | BACKTIKED_QUOTED_STRING
                      | SINGLE_QUOTED_STRING
{
    methods = [getValue]
     mixin = "org.mule.tooling.lang.dw.parser.psi.WeaveStringLiteralMixin"
}

AnyDateLiteral::= RULE_ANY_DATE

RegexLiteral::= RULE_ANY_REGEX {
mixin = "org.mule.tooling.lang.dw.parser.psi.WeaveRegexLiteralMixin"
}

ObjectDeconstructExpression ::= '{' (KeyValuePair | DynamicKeyValuePair) '~' Expression '}' {pin=3}

ArrayExpression::= '[' (ArrayElement (('~' Expression) | ( ',' ArrayElement )* (',')? )?)? ']'
{
    implements="com.intellij.psi.NavigatablePsiElement"
    methods=[getPresentation]
    pin=1
}

private ArrayElement::= Expression (IF SimpleExpression)?

private TypeLiteral ::= Type

Type ::= Annotation* MetadataInjectorType

private BasicTypeExpression ::= (LambdaType | CloseOrderedObjectType | OrderedObjectType | CloseObjectType | ObjectType  | ReferenceType | LiteralType | ('(' Type ')')) (Schema)?

TypeParameter ::= Identifier ( '<:' Type)? {
       methods = [getName setName getNameIdentifier]
       implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
       mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
   }

MetadataInjectorType ::= UnionType ('<~' Schema)?

UnionType ::= IntersectionType UnionTypeExpression* {pin= 2}

private UnionTypeExpression ::= ('|' IntersectionType) {pin= 2}

IntersectionType ::= BasicTypeExpression (IntersectionTypeExpression)* {pin= 2}

private IntersectionTypeExpression ::=  ('&' BasicTypeExpression) {pin= 2}

ObjectType ::=   '{' KeyValuePairsType '}' (Schema)? {pin = 1}

private KeyValuePairsType ::= ((KeyValuePairType)? (',' KeyValuePairType)*)? (',')?

CloseObjectType ::=  '{|' KeyValuePairsType '|}' (Schema)? {pin = 1}

OrderedObjectType ::=   '{-' ((KeyValuePairType)? (',' KeyValuePairType)*)?  '-}' (Schema)? {pin = 1}

CloseOrderedObjectType ::=   '{-|' ((KeyValuePairType)? (',' KeyValuePairType)*)?  '|-}' (Schema)? {pin = 1}

KeyValuePairType ::=  KeyType ('*')? ('?')? ":" Type

KeyType ::=  Annotation* NameType AttributesType?

AttributesType ::= "@""(" NameType ":" Type (',' NameType ":" Type)* ")" {pin= 1}

NameType ::=  Annotation* ((Identifier"#")?(Identifier | StringLiteral) ('?')?) | '_' | '('TypeParameter')'

LambdaType ::= '(' (LambdaTypeParameter (',' LambdaTypeParameter)*)? ')' '->' Type {pin= 4}

LambdaTypeParameter ::= NamedLambdaTypeParameter | Type

private NamedLambdaTypeParameter ::= Identifier ('?')? ':' Type {pin=3}

ReferenceType ::= FqnIdentifier ('<' Type (',' Type)* '>')? ('.' (StringLiteral|Identifier))* {pin = 2}

DataFormat ::= MIME_TYPE_KEYWORD

NumberLiteral ::= ('+' | '-')? (DOUBLE_LITERAL | INTEGER_LITERAL)

FqnIdentifier ::= CustomLoader? ContainerModuleIdentifier Identifier
{
     methods = [getName setName getNameIdentifier getReferences getModuleFQN getPath]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
     name="Identifier"
}


ContainerModuleIdentifier ::= (Identifier '::')*

CustomLoader ::= Identifier"!"

Identifier ::= (DOLLAR_VARIABLE | ID | MATCH_KEYWORD | MATCHES_KEYWORD | FROM_KEYWORD | NOT_KEYWORD | UPDATE_KEYWORD | AT_KEYWORD | METADATA_INJECTOR)  {methods = [getName] name="Identifier" }

LiteralType ::= NumberLiteral | StringLiteral | BooleanLiteral
