import java.time.Instant
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter


plugins {
    id "org.jetbrains.intellij" version "1.17.2"
}

allprojects {

    apply plugin: 'idea'
    apply plugin: 'org.jetbrains.intellij'
    apply plugin: 'java'

    def String DEVELOP = "Develop"
    def branch = gitBranch()

    def ijPluginRepoChannel = branch.startsWith("release/") ? "" : DEVELOP

    if (ijPluginRepoChannel.equalsIgnoreCase(DEVELOP)) {
        version = DateTimeFormatter.ofPattern("yyyyMMdd.HHmmss").withZone(ZoneOffset.UTC).format(Instant.now())
    } else {
        // format is: release/{plugin_version}
        def branchParts = branch.split("/")
        version = branchParts[1]
    }

    configurations {
        gen
    }

    repositories {
//        mavenLocal()
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url "https://repository.mulesoft.org/releases/"
        }
        maven {
            url "https://repository.mulesoft.org/snapshots/"
        }
        maven {
            url "https://repository.mulesoft.org/nexus/content/repositories/releases"
        }
        maven {
            name "jitpack"
            url "https://jitpack.io"
        }
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
    group = 'org.mule.tooling.intellij'

    task jarSources(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    intellij {
        version = ideaVersion
        updateSinceUntilBuild = true
        downloadSources = true
    }

    publishPlugin {
        token = System.getenv('IJ_TOKEN')
        channels = [ijPluginRepoChannel]
    }

    assemble.dependsOn jarSources

}


def gitBranch() {
    def ciBranch = System.getenv("BRANCH_NAME")
    if (ciBranch != null) {
        ciBranch
    } else {
        def workingDir = new File("${project.projectDir}/")
        def branch = ""
        def proc = "git rev-parse --abbrev-ref HEAD".execute(null, workingDir)
        proc.in.eachLine { line -> branch = line }
        proc.err.eachLine { line -> println line }
        proc.waitFor()
        branch
    }
}


